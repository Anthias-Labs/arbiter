pub use liquid_exchange::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod liquid_exchange {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_arbiter_token_x\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_arbiter_token_y\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"PriceChange\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_in\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"token_out\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amount_in\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amount_out\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Swap\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"arbiter_token_x\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"arbiter_token_x_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"arbiter_token_y\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"arbiter_token_y_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setPrice\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token_in_address\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_amount_in\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"swap\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static LIQUIDEXCHANGE_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(||
    ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid"));
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        97,
        7,
        71,
        56,
        3,
        128,
        97,
        7,
        71,
        131,
        57,
        129,
        1,
        96,
        64,
        129,
        144,
        82,
        97,
        0,
        47,
        145,
        97,
        0,
        167,
        86,
        91,
        96,
        0,
        128,
        84,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        145,
        130,
        22,
        23,
        144,
        145,
        85,
        96,
        1,
        128,
        84,
        130,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        149,
        134,
        22,
        144,
        129,
        23,
        144,
        145,
        85,
        96,
        2,
        128,
        84,
        131,
        22,
        130,
        23,
        144,
        85,
        96,
        3,
        128,
        84,
        131,
        22,
        148,
        144,
        149,
        22,
        147,
        144,
        147,
        23,
        144,
        147,
        85,
        96,
        4,
        128,
        84,
        144,
        147,
        22,
        144,
        145,
        23,
        144,
        145,
        85,
        96,
        5,
        85,
        97,
        0,
        227,
        86,
        91,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        0,
        162,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        96,
        96,
        132,
        134,
        3,
        18,
        21,
        97,
        0,
        188,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        197,
        132,
        97,
        0,
        139,
        86,
        91,
        146,
        80,
        97,
        0,
        211,
        96,
        32,
        133,
        1,
        97,
        0,
        139,
        86,
        91,
        145,
        80,
        96,
        64,
        132,
        1,
        81,
        144,
        80,
        146,
        80,
        146,
        80,
        146,
        86,
        91,
        97,
        6,
        85,
        128,
        97,
        0,
        242,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        158,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        158,
        23,
        19,
        98,
        17,
        97,
        0,
        102,
        87,
        128,
        99,
        158,
        23,
        19,
        98,
        20,
        97,
        1,
        32,
        87,
        128,
        99,
        160,
        53,
        177,
        254,
        20,
        97,
        1,
        51,
        87,
        128,
        99,
        208,
        4,
        240,
        247,
        20,
        97,
        1,
        60,
        87,
        128,
        99,
        229,
        90,
        236,
        252,
        20,
        97,
        1,
        79,
        87,
        128,
        99,
        248,
        81,
        164,
        64,
        20,
        97,
        1,
        98,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        24,
        151,
        83,
        241,
        20,
        97,
        0,
        163,
        87,
        128,
        99,
        38,
        137,
        111,
        172,
        20,
        97,
        0,
        211,
        87,
        128,
        99,
        106,
        20,
        96,
        36,
        20,
        97,
        0,
        230,
        87,
        128,
        99,
        145,
        183,
        245,
        237,
        20,
        97,
        1,
        3,
        87,
        128,
        99,
        152,
        213,
        253,
        202,
        20,
        97,
        1,
        24,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        96,
        2,
        84,
        97,
        0,
        182,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        96,
        4,
        84,
        97,
        0,
        182,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        97,
        0,
        245,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        202,
        86,
        91,
        97,
        1,
        22,
        97,
        1,
        17,
        54,
        96,
        4,
        97,
        5,
        92,
        86,
        91,
        97,
        1,
        117,
        86,
        91,
        0,
        91,
        96,
        5,
        84,
        97,
        0,
        245,
        86,
        91,
        96,
        3,
        84,
        97,
        0,
        182,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        97,
        0,
        245,
        96,
        5,
        84,
        129,
        86,
        91,
        97,
        1,
        22,
        97,
        1,
        74,
        54,
        96,
        4,
        97,
        5,
        117,
        86,
        91,
        97,
        2,
        25,
        86,
        91,
        96,
        1,
        84,
        97,
        0,
        182,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        0,
        84,
        97,
        0,
        182,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        1,
        222,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        33,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        110,
        108,
        121,
        32,
        97,
        100,
        109,
        105,
        110,
        32,
        99,
        97,
        110,
        32,
        99,
        97,
        108,
        108,
        32,
        116,
        104,
        105,
        115,
        32,
        102,
        117,
        110,
        99,
        116,
        105,
        111,
        96,
        68,
        130,
        1,
        82,
        96,
        55,
        96,
        249,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        5,
        129,
        144,
        85,
        96,
        64,
        81,
        129,
        129,
        82,
        127,
        243,
        71,
        238,
        153,
        80,
        59,
        241,
        156,
        2,
        139,
        214,
        177,
        143,
        60,
        103,
        110,
        130,
        169,
        187,
        91,
        43,
        181,
        34,
        90,
        235,
        224,
        253,
        98,
        253,
        106,
        13,
        25,
        144,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        86,
        91,
        96,
        2,
        84,
        96,
        0,
        144,
        129,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        129,
        22,
        144,
        133,
        22,
        3,
        97,
        3,
        182,
        87,
        96,
        5,
        84,
        97,
        2,
        65,
        144,
        132,
        97,
        5,
        173,
        86,
        91,
        96,
        1,
        84,
        96,
        64,
        81,
        99,
        57,
        80,
        147,
        81,
        96,
        224,
        27,
        129,
        82,
        51,
        96,
        4,
        130,
        1,
        82,
        96,
        36,
        129,
        1,
        134,
        144,
        82,
        145,
        147,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        99,
        57,
        80,
        147,
        81,
        144,
        96,
        68,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        2,
        147,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        2,
        183,
        145,
        144,
        97,
        5,
        210,
        86,
        91,
        80,
        96,
        1,
        84,
        96,
        0,
        84,
        96,
        64,
        81,
        99,
        35,
        184,
        114,
        221,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        146,
        131,
        22,
        146,
        99,
        35,
        184,
        114,
        221,
        146,
        97,
        2,
        241,
        146,
        51,
        146,
        144,
        145,
        22,
        144,
        136,
        144,
        96,
        4,
        1,
        97,
        5,
        251,
        86,
        91,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        3,
        16,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        3,
        52,
        145,
        144,
        97,
        5,
        210,
        86,
        91,
        80,
        96,
        3,
        84,
        96,
        0,
        84,
        96,
        64,
        81,
        99,
        35,
        184,
        114,
        221,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        146,
        131,
        22,
        146,
        99,
        35,
        184,
        114,
        221,
        146,
        97,
        3,
        109,
        146,
        145,
        22,
        144,
        51,
        144,
        135,
        144,
        96,
        4,
        1,
        97,
        5,
        251,
        86,
        91,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        3,
        140,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        3,
        176,
        145,
        144,
        97,
        5,
        210,
        86,
        91,
        80,
        97,
        4,
        199,
        86,
        91,
        96,
        4,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        129,
        22,
        144,
        133,
        22,
        3,
        97,
        4,
        143,
        87,
        97,
        3,
        216,
        131,
        96,
        5,
        84,
        97,
        5,
        31,
        86,
        91,
        96,
        3,
        84,
        96,
        0,
        84,
        96,
        64,
        81,
        99,
        35,
        184,
        114,
        221,
        96,
        224,
        27,
        129,
        82,
        146,
        148,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        145,
        130,
        22,
        146,
        99,
        35,
        184,
        114,
        221,
        146,
        97,
        4,
        19,
        146,
        51,
        146,
        145,
        22,
        144,
        136,
        144,
        96,
        4,
        1,
        97,
        5,
        251,
        86,
        91,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        4,
        50,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        4,
        86,
        145,
        144,
        97,
        5,
        210,
        86,
        91,
        80,
        96,
        1,
        84,
        96,
        0,
        84,
        96,
        64,
        81,
        99,
        35,
        184,
        114,
        221,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        146,
        131,
        22,
        146,
        99,
        35,
        184,
        114,
        221,
        146,
        97,
        3,
        109,
        146,
        145,
        22,
        144,
        51,
        144,
        135,
        144,
        96,
        4,
        1,
        97,
        5,
        251,
        86,
        91,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        13,
        96,
        36,
        130,
        1,
        82,
        108,
        36,
        183,
        59,
        48,
        182,
        52,
        178,
        16,
        58,
        55,
        181,
        178,
        183,
        96,
        153,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        1,
        213,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        128,
        135,
        22,
        130,
        82,
        131,
        22,
        96,
        32,
        130,
        1,
        82,
        144,
        129,
        1,
        132,
        144,
        82,
        96,
        96,
        129,
        1,
        131,
        144,
        82,
        127,
        250,
        45,
        218,
        28,
        193,
        184,
        110,
        65,
        35,
        151,
        2,
        117,
        107,
        19,
        239,
        251,
        193,
        160,
        146,
        181,
        197,
        126,
        58,
        211,
        32,
        251,
        228,
        243,
        177,
        63,
        226,
        53,
        144,
        96,
        128,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        5,
        52,
        131,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        132,
        97,
        5,
        61,
        86,
        91,
        144,
        80,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        130,
        130,
        2,
        129,
        21,
        21,
        132,
        21,
        133,
        131,
        4,
        133,
        20,
        23,
        22,
        97,
        5,
        85,
        87,
        96,
        0,
        128,
        253,
        91,
        4,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        5,
        110,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        5,
        136,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        5,
        159,
        87,
        96,
        0,
        128,
        253,
        91,
        148,
        96,
        32,
        147,
        144,
        147,
        1,
        53,
        147,
        80,
        80,
        80,
        86,
        91,
        128,
        130,
        2,
        129,
        21,
        130,
        130,
        4,
        132,
        20,
        23,
        97,
        5,
        55,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        5,
        228,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        128,
        21,
        21,
        129,
        20,
        97,
        5,
        244,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        147,
        132,
        22,
        129,
        82,
        145,
        144,
        146,
        22,
        96,
        32,
        130,
        1,
        82,
        96,
        64,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        96,
        1,
        144,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        253,
        98,
        58,
        38,
        94,
        239,
        77,
        240,
        89,
        121,
        155,
        136,
        184,
        134,
        134,
        174,
        126,
        254,
        95,
        103,
        34,
        148,
        252,
        242,
        43,
        216,
        50,
        22,
        201,
        179,
        74,
        184,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static LIQUIDEXCHANGE_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        158,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        158,
        23,
        19,
        98,
        17,
        97,
        0,
        102,
        87,
        128,
        99,
        158,
        23,
        19,
        98,
        20,
        97,
        1,
        32,
        87,
        128,
        99,
        160,
        53,
        177,
        254,
        20,
        97,
        1,
        51,
        87,
        128,
        99,
        208,
        4,
        240,
        247,
        20,
        97,
        1,
        60,
        87,
        128,
        99,
        229,
        90,
        236,
        252,
        20,
        97,
        1,
        79,
        87,
        128,
        99,
        248,
        81,
        164,
        64,
        20,
        97,
        1,
        98,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        24,
        151,
        83,
        241,
        20,
        97,
        0,
        163,
        87,
        128,
        99,
        38,
        137,
        111,
        172,
        20,
        97,
        0,
        211,
        87,
        128,
        99,
        106,
        20,
        96,
        36,
        20,
        97,
        0,
        230,
        87,
        128,
        99,
        145,
        183,
        245,
        237,
        20,
        97,
        1,
        3,
        87,
        128,
        99,
        152,
        213,
        253,
        202,
        20,
        97,
        1,
        24,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        96,
        2,
        84,
        97,
        0,
        182,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        96,
        4,
        84,
        97,
        0,
        182,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        97,
        0,
        245,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        202,
        86,
        91,
        97,
        1,
        22,
        97,
        1,
        17,
        54,
        96,
        4,
        97,
        5,
        92,
        86,
        91,
        97,
        1,
        117,
        86,
        91,
        0,
        91,
        96,
        5,
        84,
        97,
        0,
        245,
        86,
        91,
        96,
        3,
        84,
        97,
        0,
        182,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        97,
        0,
        245,
        96,
        5,
        84,
        129,
        86,
        91,
        97,
        1,
        22,
        97,
        1,
        74,
        54,
        96,
        4,
        97,
        5,
        117,
        86,
        91,
        97,
        2,
        25,
        86,
        91,
        96,
        1,
        84,
        97,
        0,
        182,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        0,
        84,
        97,
        0,
        182,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        1,
        222,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        33,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        110,
        108,
        121,
        32,
        97,
        100,
        109,
        105,
        110,
        32,
        99,
        97,
        110,
        32,
        99,
        97,
        108,
        108,
        32,
        116,
        104,
        105,
        115,
        32,
        102,
        117,
        110,
        99,
        116,
        105,
        111,
        96,
        68,
        130,
        1,
        82,
        96,
        55,
        96,
        249,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        5,
        129,
        144,
        85,
        96,
        64,
        81,
        129,
        129,
        82,
        127,
        243,
        71,
        238,
        153,
        80,
        59,
        241,
        156,
        2,
        139,
        214,
        177,
        143,
        60,
        103,
        110,
        130,
        169,
        187,
        91,
        43,
        181,
        34,
        90,
        235,
        224,
        253,
        98,
        253,
        106,
        13,
        25,
        144,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        86,
        91,
        96,
        2,
        84,
        96,
        0,
        144,
        129,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        129,
        22,
        144,
        133,
        22,
        3,
        97,
        3,
        182,
        87,
        96,
        5,
        84,
        97,
        2,
        65,
        144,
        132,
        97,
        5,
        173,
        86,
        91,
        96,
        1,
        84,
        96,
        64,
        81,
        99,
        57,
        80,
        147,
        81,
        96,
        224,
        27,
        129,
        82,
        51,
        96,
        4,
        130,
        1,
        82,
        96,
        36,
        129,
        1,
        134,
        144,
        82,
        145,
        147,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        99,
        57,
        80,
        147,
        81,
        144,
        96,
        68,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        2,
        147,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        2,
        183,
        145,
        144,
        97,
        5,
        210,
        86,
        91,
        80,
        96,
        1,
        84,
        96,
        0,
        84,
        96,
        64,
        81,
        99,
        35,
        184,
        114,
        221,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        146,
        131,
        22,
        146,
        99,
        35,
        184,
        114,
        221,
        146,
        97,
        2,
        241,
        146,
        51,
        146,
        144,
        145,
        22,
        144,
        136,
        144,
        96,
        4,
        1,
        97,
        5,
        251,
        86,
        91,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        3,
        16,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        3,
        52,
        145,
        144,
        97,
        5,
        210,
        86,
        91,
        80,
        96,
        3,
        84,
        96,
        0,
        84,
        96,
        64,
        81,
        99,
        35,
        184,
        114,
        221,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        146,
        131,
        22,
        146,
        99,
        35,
        184,
        114,
        221,
        146,
        97,
        3,
        109,
        146,
        145,
        22,
        144,
        51,
        144,
        135,
        144,
        96,
        4,
        1,
        97,
        5,
        251,
        86,
        91,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        3,
        140,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        3,
        176,
        145,
        144,
        97,
        5,
        210,
        86,
        91,
        80,
        97,
        4,
        199,
        86,
        91,
        96,
        4,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        129,
        22,
        144,
        133,
        22,
        3,
        97,
        4,
        143,
        87,
        97,
        3,
        216,
        131,
        96,
        5,
        84,
        97,
        5,
        31,
        86,
        91,
        96,
        3,
        84,
        96,
        0,
        84,
        96,
        64,
        81,
        99,
        35,
        184,
        114,
        221,
        96,
        224,
        27,
        129,
        82,
        146,
        148,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        145,
        130,
        22,
        146,
        99,
        35,
        184,
        114,
        221,
        146,
        97,
        4,
        19,
        146,
        51,
        146,
        145,
        22,
        144,
        136,
        144,
        96,
        4,
        1,
        97,
        5,
        251,
        86,
        91,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        4,
        50,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        4,
        86,
        145,
        144,
        97,
        5,
        210,
        86,
        91,
        80,
        96,
        1,
        84,
        96,
        0,
        84,
        96,
        64,
        81,
        99,
        35,
        184,
        114,
        221,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        146,
        131,
        22,
        146,
        99,
        35,
        184,
        114,
        221,
        146,
        97,
        3,
        109,
        146,
        145,
        22,
        144,
        51,
        144,
        135,
        144,
        96,
        4,
        1,
        97,
        5,
        251,
        86,
        91,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        13,
        96,
        36,
        130,
        1,
        82,
        108,
        36,
        183,
        59,
        48,
        182,
        52,
        178,
        16,
        58,
        55,
        181,
        178,
        183,
        96,
        153,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        1,
        213,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        128,
        135,
        22,
        130,
        82,
        131,
        22,
        96,
        32,
        130,
        1,
        82,
        144,
        129,
        1,
        132,
        144,
        82,
        96,
        96,
        129,
        1,
        131,
        144,
        82,
        127,
        250,
        45,
        218,
        28,
        193,
        184,
        110,
        65,
        35,
        151,
        2,
        117,
        107,
        19,
        239,
        251,
        193,
        160,
        146,
        181,
        197,
        126,
        58,
        211,
        32,
        251,
        228,
        243,
        177,
        63,
        226,
        53,
        144,
        96,
        128,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        5,
        52,
        131,
        103,
        13,
        224,
        182,
        179,
        167,
        100,
        0,
        0,
        132,
        97,
        5,
        61,
        86,
        91,
        144,
        80,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        130,
        130,
        2,
        129,
        21,
        21,
        132,
        21,
        133,
        131,
        4,
        133,
        20,
        23,
        22,
        97,
        5,
        85,
        87,
        96,
        0,
        128,
        253,
        91,
        4,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        5,
        110,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        5,
        136,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        5,
        159,
        87,
        96,
        0,
        128,
        253,
        91,
        148,
        96,
        32,
        147,
        144,
        147,
        1,
        53,
        147,
        80,
        80,
        80,
        86,
        91,
        128,
        130,
        2,
        129,
        21,
        130,
        130,
        4,
        132,
        20,
        23,
        97,
        5,
        55,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        5,
        228,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        128,
        21,
        21,
        129,
        20,
        97,
        5,
        244,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        147,
        132,
        22,
        129,
        82,
        145,
        144,
        146,
        22,
        96,
        32,
        130,
        1,
        82,
        96,
        64,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        96,
        1,
        144,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        253,
        98,
        58,
        38,
        94,
        239,
        77,
        240,
        89,
        121,
        155,
        136,
        184,
        134,
        134,
        174,
        126,
        254,
        95,
        103,
        34,
        148,
        252,
        242,
        43,
        216,
        50,
        22,
        201,
        179,
        74,
        184,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static LIQUIDEXCHANGE_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct LiquidExchange<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for LiquidExchange<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for LiquidExchange<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for LiquidExchange<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for LiquidExchange<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(LiquidExchange)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> LiquidExchange<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    LIQUIDEXCHANGE_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                LIQUIDEXCHANGE_ABI.clone(),
                LIQUIDEXCHANGE_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `WAD` (0x6a146024) function
        pub fn wad(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([106, 20, 96, 36], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `admin` (0xf851a440) function
        pub fn admin(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([248, 81, 164, 64], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `arbiter_token_x` (0xe55aecfc) function
        pub fn arbiter_token_x(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([229, 90, 236, 252], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `arbiter_token_x_address` (0x189753f1) function
        pub fn arbiter_token_x_address(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([24, 151, 83, 241], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `arbiter_token_y` (0x9e171362) function
        pub fn arbiter_token_y(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([158, 23, 19, 98], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `arbiter_token_y_address` (0x26896fac) function
        pub fn arbiter_token_y_address(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([38, 137, 111, 172], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getPrice` (0x98d5fdca) function
        pub fn get_price(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([152, 213, 253, 202], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `price` (0xa035b1fe) function
        pub fn price(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([160, 53, 177, 254], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setPrice` (0x91b7f5ed) function
        pub fn set_price(
            &self,
            price: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([145, 183, 245, 237], price)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `swap` (0xd004f0f7) function
        pub fn swap(
            &self,
            token_in_address: ::ethers::core::types::Address,
            amount_in: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([208, 4, 240, 247], (token_in_address, amount_in))
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `PriceChange` event
        pub fn price_change_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            PriceChangeFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `Swap` event
        pub fn swap_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, SwapFilter> {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            LiquidExchangeEvents,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for LiquidExchange<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "PriceChange", abi = "PriceChange(uint256)")]
    pub struct PriceChangeFilter {
        pub price: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "Swap", abi = "Swap(address,address,uint256,uint256)")]
    pub struct SwapFilter {
        pub token_in: ::ethers::core::types::Address,
        pub token_out: ::ethers::core::types::Address,
        pub amount_in: ::ethers::core::types::U256,
        pub amount_out: ::ethers::core::types::U256,
    }
    ///Container type for all of the contract's events
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum LiquidExchangeEvents {
        PriceChangeFilter(PriceChangeFilter),
        SwapFilter(SwapFilter),
    }
    impl ::ethers::contract::EthLogDecode for LiquidExchangeEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::Error> {
            if let Ok(decoded) = PriceChangeFilter::decode_log(log) {
                return Ok(LiquidExchangeEvents::PriceChangeFilter(decoded));
            }
            if let Ok(decoded) = SwapFilter::decode_log(log) {
                return Ok(LiquidExchangeEvents::SwapFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::core::fmt::Display for LiquidExchangeEvents {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::PriceChangeFilter(element) => ::core::fmt::Display::fmt(element, f),
                Self::SwapFilter(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<PriceChangeFilter> for LiquidExchangeEvents {
        fn from(value: PriceChangeFilter) -> Self {
            Self::PriceChangeFilter(value)
        }
    }
    impl ::core::convert::From<SwapFilter> for LiquidExchangeEvents {
        fn from(value: SwapFilter) -> Self {
            Self::SwapFilter(value)
        }
    }
    ///Container type for all input parameters for the `WAD` function with signature `WAD()` and selector `0x6a146024`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "WAD", abi = "WAD()")]
    pub struct WadCall;
    ///Container type for all input parameters for the `admin` function with signature `admin()` and selector `0xf851a440`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "admin", abi = "admin()")]
    pub struct AdminCall;
    ///Container type for all input parameters for the `arbiter_token_x` function with signature `arbiter_token_x()` and selector `0xe55aecfc`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "arbiter_token_x", abi = "arbiter_token_x()")]
    pub struct ArbiterTokenXCall;
    ///Container type for all input parameters for the `arbiter_token_x_address` function with signature `arbiter_token_x_address()` and selector `0x189753f1`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "arbiter_token_x_address", abi = "arbiter_token_x_address()")]
    pub struct ArbiterTokenXAddressCall;
    ///Container type for all input parameters for the `arbiter_token_y` function with signature `arbiter_token_y()` and selector `0x9e171362`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "arbiter_token_y", abi = "arbiter_token_y()")]
    pub struct ArbiterTokenYCall;
    ///Container type for all input parameters for the `arbiter_token_y_address` function with signature `arbiter_token_y_address()` and selector `0x26896fac`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "arbiter_token_y_address", abi = "arbiter_token_y_address()")]
    pub struct ArbiterTokenYAddressCall;
    ///Container type for all input parameters for the `getPrice` function with signature `getPrice()` and selector `0x98d5fdca`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "getPrice", abi = "getPrice()")]
    pub struct GetPriceCall;
    ///Container type for all input parameters for the `price` function with signature `price()` and selector `0xa035b1fe`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "price", abi = "price()")]
    pub struct PriceCall;
    ///Container type for all input parameters for the `setPrice` function with signature `setPrice(uint256)` and selector `0x91b7f5ed`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "setPrice", abi = "setPrice(uint256)")]
    pub struct SetPriceCall {
        pub price: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `swap` function with signature `swap(address,uint256)` and selector `0xd004f0f7`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "swap", abi = "swap(address,uint256)")]
    pub struct SwapCall {
        pub token_in_address: ::ethers::core::types::Address,
        pub amount_in: ::ethers::core::types::U256,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum LiquidExchangeCalls {
        Wad(WadCall),
        Admin(AdminCall),
        ArbiterTokenX(ArbiterTokenXCall),
        ArbiterTokenXAddress(ArbiterTokenXAddressCall),
        ArbiterTokenY(ArbiterTokenYCall),
        ArbiterTokenYAddress(ArbiterTokenYAddressCall),
        GetPrice(GetPriceCall),
        Price(PriceCall),
        SetPrice(SetPriceCall),
        Swap(SwapCall),
    }
    impl ::ethers::core::abi::AbiDecode for LiquidExchangeCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <WadCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Wad(decoded));
            }
            if let Ok(decoded)
                = <AdminCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Admin(decoded));
            }
            if let Ok(decoded)
                = <ArbiterTokenXCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::ArbiterTokenX(decoded));
            }
            if let Ok(decoded)
                = <ArbiterTokenXAddressCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::ArbiterTokenXAddress(decoded));
            }
            if let Ok(decoded)
                = <ArbiterTokenYCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::ArbiterTokenY(decoded));
            }
            if let Ok(decoded)
                = <ArbiterTokenYAddressCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::ArbiterTokenYAddress(decoded));
            }
            if let Ok(decoded)
                = <GetPriceCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::GetPrice(decoded));
            }
            if let Ok(decoded)
                = <PriceCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Price(decoded));
            }
            if let Ok(decoded)
                = <SetPriceCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::SetPrice(decoded));
            }
            if let Ok(decoded)
                = <SwapCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Swap(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for LiquidExchangeCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::Wad(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Admin(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::ArbiterTokenX(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ArbiterTokenXAddress(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ArbiterTokenY(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ArbiterTokenYAddress(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GetPrice(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Price(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::SetPrice(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Swap(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for LiquidExchangeCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Wad(element) => ::core::fmt::Display::fmt(element, f),
                Self::Admin(element) => ::core::fmt::Display::fmt(element, f),
                Self::ArbiterTokenX(element) => ::core::fmt::Display::fmt(element, f),
                Self::ArbiterTokenXAddress(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::ArbiterTokenY(element) => ::core::fmt::Display::fmt(element, f),
                Self::ArbiterTokenYAddress(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::GetPrice(element) => ::core::fmt::Display::fmt(element, f),
                Self::Price(element) => ::core::fmt::Display::fmt(element, f),
                Self::SetPrice(element) => ::core::fmt::Display::fmt(element, f),
                Self::Swap(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<WadCall> for LiquidExchangeCalls {
        fn from(value: WadCall) -> Self {
            Self::Wad(value)
        }
    }
    impl ::core::convert::From<AdminCall> for LiquidExchangeCalls {
        fn from(value: AdminCall) -> Self {
            Self::Admin(value)
        }
    }
    impl ::core::convert::From<ArbiterTokenXCall> for LiquidExchangeCalls {
        fn from(value: ArbiterTokenXCall) -> Self {
            Self::ArbiterTokenX(value)
        }
    }
    impl ::core::convert::From<ArbiterTokenXAddressCall> for LiquidExchangeCalls {
        fn from(value: ArbiterTokenXAddressCall) -> Self {
            Self::ArbiterTokenXAddress(value)
        }
    }
    impl ::core::convert::From<ArbiterTokenYCall> for LiquidExchangeCalls {
        fn from(value: ArbiterTokenYCall) -> Self {
            Self::ArbiterTokenY(value)
        }
    }
    impl ::core::convert::From<ArbiterTokenYAddressCall> for LiquidExchangeCalls {
        fn from(value: ArbiterTokenYAddressCall) -> Self {
            Self::ArbiterTokenYAddress(value)
        }
    }
    impl ::core::convert::From<GetPriceCall> for LiquidExchangeCalls {
        fn from(value: GetPriceCall) -> Self {
            Self::GetPrice(value)
        }
    }
    impl ::core::convert::From<PriceCall> for LiquidExchangeCalls {
        fn from(value: PriceCall) -> Self {
            Self::Price(value)
        }
    }
    impl ::core::convert::From<SetPriceCall> for LiquidExchangeCalls {
        fn from(value: SetPriceCall) -> Self {
            Self::SetPrice(value)
        }
    }
    impl ::core::convert::From<SwapCall> for LiquidExchangeCalls {
        fn from(value: SwapCall) -> Self {
            Self::Swap(value)
        }
    }
    ///Container type for all return fields from the `WAD` function with signature `WAD()` and selector `0x6a146024`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct WadReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `admin` function with signature `admin()` and selector `0xf851a440`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct AdminReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `arbiter_token_x` function with signature `arbiter_token_x()` and selector `0xe55aecfc`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ArbiterTokenXReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `arbiter_token_x_address` function with signature `arbiter_token_x_address()` and selector `0x189753f1`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ArbiterTokenXAddressReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `arbiter_token_y` function with signature `arbiter_token_y()` and selector `0x9e171362`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ArbiterTokenYReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `arbiter_token_y_address` function with signature `arbiter_token_y_address()` and selector `0x26896fac`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ArbiterTokenYAddressReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `getPrice` function with signature `getPrice()` and selector `0x98d5fdca`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct GetPriceReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `price` function with signature `price()` and selector `0xa035b1fe`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct PriceReturn(pub ::ethers::core::types::U256);
}
